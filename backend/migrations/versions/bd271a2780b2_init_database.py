"""Init database

Revision ID: bd271a2780b2
Revises:
Create Date: 2021-05-19 15:10:53.506962

"""
import os

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from dataall.db import get_engine, has_table, create_schema_if_not_exists

revision = 'bd271a2780b2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    envname = os.getenv('envname', 'local')
    print('ENVNAME', envname)
    engine = get_engine(envname=envname).engine
    create_schema_if_not_exists(engine, envname)
    try:
        if not has_table('EnvironmentRedshiftCluster', engine):
            op.create_table(
                'EnvironmentRedshiftCluster',
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('environmentUri', 'clusterUri'),
            )
        if not has_table('activity', engine):
            op.create_table(
                'activity',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('activityUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.Column('action', sa.String(), nullable=False),
                sa.Column('summary', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('activityUri'),
            )
        if not has_table('airflow_cluster_user_permission', engine):
            op.create_table(
                'airflow_cluster_user_permission',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleForAirflowCluster', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName', 'clusterUri'),
            )
        if not has_table('airflow_project', engine):
            op.create_table(
                'airflow_project',
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('projectUri', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('cfnStackName', sa.String(), nullable=True),
                sa.Column('cfnStackArn', sa.String(), nullable=True),
                sa.Column('cfnStackStatus', sa.String(), nullable=True),
                sa.Column('codeRepositoryName', sa.String(), nullable=True),
                sa.Column('codeRepositoryLink', sa.String(), nullable=True),
                sa.Column('codeRepositoryStatus', sa.String(), nullable=True),
                sa.Column('codePipelineStatus', sa.String(), nullable=True),
                sa.Column('codePipelineName', sa.String(), nullable=True),
                sa.Column('codePipelineLink', sa.String(), nullable=True),
                sa.Column('codePipelineArn', sa.String(), nullable=True),
                sa.Column('packageName', sa.String(), nullable=False),
                sa.Column('status', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('projectUri'),
            )
        if not has_table('airflowcluster', engine):
            op.create_table(
                'airflowcluster',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('clusterArn', sa.String(), nullable=True),
                sa.Column('clusterName', sa.String(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=True),
                sa.Column('kmsAlias', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.Column('vpc', sa.String(), nullable=True),
                sa.Column('subnetIds', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('securityGroupIds', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('CFNStackName', sa.String(), nullable=True),
                sa.Column('CFNStackStatus', sa.String(), nullable=True),
                sa.Column('CFNStackArn', sa.String(), nullable=True),
                sa.Column('IAMRoleArn', sa.String(), nullable=True),
                sa.Column('presignedUrl', sa.String(), nullable=True),
                sa.Column('imported', sa.Boolean(), nullable=True),
                sa.Column('configurationOptions', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('airflowVersion', sa.String(), nullable=True),
                sa.Column('dagS3Path', sa.String(), nullable=True),
                sa.Column('pluginsS3Path', sa.String(), nullable=True),
                sa.Column('requirementsS3Path', sa.String(), nullable=True),
                sa.Column('environmentClass', sa.String(), nullable=True),
                sa.Column('loggingConfiguration', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('sourceBucketArn', sa.String(), nullable=False),
                sa.Column('webServerAccessMode', sa.String(), nullable=True),
                sa.Column('maxWorkers', sa.Integer(), nullable=True),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.Column('webServerUrl', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri'),
            )
        if not has_table('all_permissions', engine):
            op.create_table(
                'all_permissions',
                sa.Column('objectUri', sa.String(), nullable=False),
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('permission', sa.String(), nullable=False),
                sa.Column('scope', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('objectUri', 'userName'),
            )
        if not has_table('apikey', engine):
            op.create_table(
                'apikey',
                sa.Column('ApiKeyId', sa.String(), nullable=False),
                sa.Column('ApiKeySecretHash', sa.String(), nullable=False),
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('SamlGroups', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('expires', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('ApiKeyId'),
            )
        if not has_table('athena_query_execution', engine):
            op.create_table(
                'athena_query_execution',
                sa.Column('parentUri', sa.String(), nullable=False),
                sa.Column('QueryExecutionId', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('queryid', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('completed', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('QueryExecutionId'),
            )
        if not has_table('dashboard', engine):
            op.create_table(
                'dashboard',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('dashboardUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('namespace', sa.String(), nullable=False),
                sa.Column('DashboardId', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('dashboardUri'),
            )
        if not has_table('dashboardshare', engine):
            op.create_table(
                'dashboardshare',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('dashboardUri', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('shareUri', 'dashboardUri'),
            )
        if not has_table('data_access_request', engine):
            op.create_table(
                'data_access_request',
                sa.Column('requestUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=False),
                sa.Column('principalType', sa.String(), nullable=False),
                sa.Column('principalName', sa.String(), nullable=False),
                sa.Column('requester', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('message', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('requestUri'),
            )
        if not has_table('dataset', engine):
            op.create_table(
                'dataset',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueProfilingJobName', sa.String(), nullable=True),
                sa.Column('GlueProfilingTriggerSchedule', sa.String(), nullable=True),
                sa.Column('GlueProfilingTriggerName', sa.String(), nullable=True),
                sa.Column('GlueDataQualityJobName', sa.String(), nullable=True),
                sa.Column('GlueDataQualitySchedule', sa.String(), nullable=True),
                sa.Column('GlueDataQualityTriggerName', sa.String(), nullable=True),
                sa.Column('IAMDatasetAdminRoleArn', sa.String(), nullable=False),
                sa.Column('IAMDatasetAdminUserArn', sa.String(), nullable=False),
                sa.Column('KmsAlias', sa.String(), nullable=False),
                sa.Column('language', sa.String(), nullable=False),
                sa.Column('topics', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('confidentiality', sa.String(), nullable=False),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('bucketCreated', sa.Boolean(), nullable=True),
                sa.Column('glueDatabaseCreated', sa.Boolean(), nullable=True),
                sa.Column('iamAdminRoleCreated', sa.Boolean(), nullable=True),
                sa.Column('iamAdminUserCreated', sa.Boolean(), nullable=True),
                sa.Column('kmsAliasCreated', sa.Boolean(), nullable=True),
                sa.Column('lakeformationLocationCreated', sa.Boolean(), nullable=True),
                sa.Column('bucketPolicyCreated', sa.Boolean(), nullable=True),
                sa.Column('businessOwnerEmail', sa.String(), nullable=True),
                sa.Column(
                    'businessOwnerDelegationEmails',
                    postgresql.ARRAY(sa.String()),
                    nullable=True,
                ),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.Column('importedS3Bucket', sa.Boolean(), nullable=True),
                sa.Column('importedGlueDatabase', sa.Boolean(), nullable=True),
                sa.Column('importedKmsKey', sa.Boolean(), nullable=True),
                sa.Column('importedAdminRole', sa.Boolean(), nullable=True),
                sa.Column('imported', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('datasetUri'),
            )
        if not has_table('dataset_access_point', engine):
            op.create_table(
                'dataset_access_point',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('projectUri', sa.String(), nullable=False),
                sa.Column('locationUri', sa.String(), nullable=False),
                sa.Column('accessPointUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('S3Prefix', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('S3AccessPointName', sa.String(), nullable=False),
                sa.Column('accessPointCreated', sa.Boolean(), nullable=False),
                sa.PrimaryKeyConstraint('accessPointUri'),
            )
        if not has_table('dataset_loader', engine):
            op.create_table(
                'dataset_loader',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('loaderUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('IAMPrincipalArn', sa.String(), nullable=False),
                sa.Column('IAMRoleId', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('loaderUri'),
            )
        if not has_table('dataset_profiling_run', engine):
            op.create_table(
                'dataset_profiling_run',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('profilingRunUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('GlueJobName', sa.String(), nullable=True),
                sa.Column('GlueJobRunId', sa.String(), nullable=True),
                sa.Column('GlueTriggerSchedule', sa.String(), nullable=True),
                sa.Column('GlueTriggerName', sa.String(), nullable=True),
                sa.Column('GlueTableName', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=True),
                sa.Column(
                    'results', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('status', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('profilingRunUri'),
            )
        if not has_table('dataset_quality_rule', engine):
            op.create_table(
                'dataset_quality_rule',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('ruleUri', sa.String(), nullable=False),
                sa.Column('query', sa.String(), nullable=False),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column(
                    'logs', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.PrimaryKeyConstraint('ruleUri'),
            )
        if not has_table('dataset_query', engine):
            op.create_table(
                'dataset_query',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('queryUri', sa.String(), nullable=False),
                sa.Column('body', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('queryUri'),
            )
        if not has_table('dataset_storage_location', engine):
            op.create_table(
                'dataset_storage_location',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('locationUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('S3Prefix', sa.String(), nullable=False),
                sa.Column('S3AccessPoint', sa.String(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('locationCreated', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('locationUri'),
            )
        if not has_table('dataset_storage_location_permission', engine):
            op.create_table(
                'dataset_storage_location_permission',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('locationUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column(
                    'userRoleForDatasetStorageLocation', sa.String(), nullable=False
                ),
                sa.PrimaryKeyConstraint('userName', 'locationUri'),
            )
        if not has_table('dataset_table', engine):
            op.create_table(
                'dataset_table',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('S3BucketName', sa.String(), nullable=False),
                sa.Column('S3Prefix', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueTableName', sa.String(), nullable=False),
                sa.Column('GlueTableConfig', sa.Text(), nullable=True),
                sa.Column(
                    'GlueTableProperties',
                    postgresql.JSON(astext_type=sa.Text()),
                    nullable=True,
                ),
                sa.Column('LastGlueTableStatus', sa.String(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('stage', sa.String(), nullable=True),
                sa.Column('topics', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('confidentiality', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('tableUri'),
            )
        if not has_table('dataset_table_column', engine):
            op.create_table(
                'dataset_table_column',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('columnUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueTableName', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('typeName', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('columnUri'),
            )
        if not has_table('dataset_table_permission', engine):
            op.create_table(
                'dataset_table_permission',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleForTable', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName', 'tableUri'),
            )
        if not has_table('dataset_table_profiling_job', engine):
            op.create_table(
                'dataset_table_profiling_job',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('jobUri', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RunCommandId', sa.String(), nullable=True),
                sa.Column('GlueDatabaseName', sa.String(), nullable=False),
                sa.Column('GlueTableName', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('jobUri'),
            )
        if not has_table('dataset_topic', engine):
            op.create_table(
                'dataset_topic',
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('topicUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('datasetUri', 'topicUri'),
            )
        if not has_table('dataset_user_permission', engine):
            op.create_table(
                'dataset_user_permission',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleForDataset', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName', 'datasetUri'),
            )
        if not has_table('document', engine):
            op.create_table(
                'document',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('parentUri', sa.String(), nullable=False),
                sa.Column('md', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('parentUri'),
            )
        if not has_table('environment', engine):
            op.create_table(
                'environment',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('cognitoGroupName', sa.String(), nullable=True),
                sa.Column('validated', sa.Boolean(), nullable=True),
                sa.Column('environmentType', sa.String(), nullable=False),
                sa.Column(
                    'isOrganizationDefaultEnvironment', sa.Boolean(), nullable=True
                ),
                sa.Column('EnvironmentDefaultIAMRoleName', sa.String(), nullable=False),
                sa.Column('EnvironmentDefaultIAMRoleArn', sa.String(), nullable=False),
                sa.Column('EnvironmentDefaultBucketName', sa.String(), nullable=True),
                sa.Column('roleCreated', sa.Boolean(), nullable=False),
                sa.Column('quicksight_enabled', sa.Boolean(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.Column('CDKRoleArn', sa.String(), nullable=False),
                sa.Column('subscriptionsEnabled', sa.Boolean(), nullable=True),
                sa.Column(
                    'subscriptionsProducersTopicName', sa.String(), nullable=True
                ),
                sa.Column(
                    'subscriptionsProducersTopicImported', sa.Boolean(), nullable=True
                ),
                sa.Column(
                    'subscriptionsConsumersTopicName', sa.String(), nullable=True
                ),
                sa.Column(
                    'subscriptionsConsumersTopicImported', sa.Boolean(), nullable=True
                ),
                sa.PrimaryKeyConstraint('environmentUri'),
            )
            op.create_table(
                'environment_group_permission',
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('groupRoleInEnvironment', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('groupUri', 'environmentUri'),
            )
            op.create_table(
                'environment_permission',
                sa.Column('entityUri', sa.String(), nullable=False),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('entityType', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('entityRoleInEnvironment', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('entityUri', 'environmentUri'),
            )
            op.create_table(
                'environment_user_permission',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleInEnvironment', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName', 'environmentUri'),
            )
        if not has_table('feed_message', engine):
            op.create_table(
                'feed_message',
                sa.Column('feedMessageUri', sa.String(), nullable=False),
                sa.Column('creator', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=False),
                sa.Column('content', sa.String(), nullable=True),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('feedMessageUri'),
            )
        if not has_table('glossary_node', engine):
            op.create_table(
                'glossary_node',
                sa.Column('nodeUri', sa.String(), nullable=False),
                sa.Column('parentUri', sa.String(), nullable=True),
                sa.Column('nodeType', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.Column('path', sa.String(), nullable=False),
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('readme', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('admin', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('nodeUri'),
            )
        if not has_table('group', engine):
            op.create_table(
                'group',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.Column('groupRoleInOrganization', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('groupUri'),
            )
        if not has_table('group_member', engine):
            op.create_table(
                'group_member',
                sa.Column('groupUri', sa.String(), nullable=False),
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleInGroup', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('groupUri', 'userName'),
            )
        if not has_table('item_tags', engine):
            op.create_table(
                'item_tags',
                sa.Column('tagid', sa.String(), nullable=False),
                sa.Column('itemid', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('tagid', 'itemid'),
            )
        if not has_table('key_value_pair', engine):
            op.create_table(
                'key_value_pair',
                sa.Column('kvId', sa.String(), nullable=False),
                sa.Column('objectUri', sa.String(), nullable=False),
                sa.Column('key', sa.String(), nullable=False),
                sa.Column('value', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('kvId'),
            )
        if not has_table('lineage_store', engine):
            op.create_table(
                'lineage_store',
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('version', sa.String(), nullable=False),
                sa.Column('guid', sa.String(), nullable=True),
                sa.Column(
                    'kind',
                    sa.Enum(
                        'dataset',
                        'table',
                        'folder',
                        'job',
                        'run',
                        'datasource',
                        name='datanodetype',
                    ),
                    nullable=False,
                ),
                sa.Column('parent', sa.String(), nullable=True),
                sa.Column('ref', sa.String(), nullable=False),
                sa.Column('location', sa.String(), nullable=True),
                sa.Column('created', sa.String(), nullable=True),
                sa.Column('inputs', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('outputs', sa.ARRAY(sa.String()), nullable=True),
                sa.PrimaryKeyConstraint('name', 'version', 'ref'),
            )
        if not has_table('metadata_facet', engine):
            op.create_table(
                'metadata_facet',
                sa.Column('facetId', sa.String(), nullable=False),
                sa.Column('guid', sa.String(), nullable=False),
                sa.Column(
                    '_schema', postgresql.JSON(astext_type=sa.Text()), nullable=False
                ),
                sa.Column(
                    'doc', postgresql.JSON(astext_type=sa.Text()), nullable=False
                ),
                sa.PrimaryKeyConstraint('facetId'),
            )
        if not has_table('metadata_tag', engine):
            op.create_table(
                'metadata_tag',
                sa.Column('tagId', sa.String(), nullable=False),
                sa.Column('nodeId', sa.String(), nullable=False),
                sa.Column('nodeKind', sa.String(), nullable=False),
                sa.Column('Key', sa.String(), nullable=False),
                sa.Column('Value', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('tagId'),
            )
        if not has_table('metric', engine):
            op.create_table(
                'metric',
                sa.Column('metricUri', sa.String(), nullable=False),
                sa.Column('metricName', sa.String(), nullable=False),
                sa.Column('metricValue', sa.Float(), nullable=False),
                sa.Column('tags', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=False),
                sa.Column('emitter', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('target', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('metricUri'),
            )
        if not has_table('notification', engine):
            op.create_table(
                'notification',
                sa.Column('notificationUri', sa.String(), nullable=False),
                sa.Column(
                    'type',
                    sa.Enum(
                        'SHARE_OBJECT_SUBMITTED',
                        'SHARE_ITEM_REQUEST',
                        'SHARE_OBJECT_APPROVED',
                        'SHARE_OBJECT_REJECTED',
                        'SHARE_OBJECT_PENDING_APPROVAL',
                        'DATASET_VERSION',
                        name='notificationtype',
                    ),
                    nullable=True,
                ),
                sa.Column('message', sa.String(), nullable=False),
                sa.Column('username', sa.String(), nullable=False),
                sa.Column('is_read', sa.Boolean(), nullable=False),
                sa.Column('target_uri', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('notificationUri'),
            )
        if not has_table('organization', engine):
            op.create_table(
                'organization',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('organizationUri'),
            )
            op.create_table(
                'organization_topic',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('topicUri', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('topicUri'),
            )
            op.create_table(
                'organization_user',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleInOrganization', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName', 'organizationUri'),
            )
        if not has_table('redshiftcluster', engine):
            op.create_table(
                'redshift_cluster_user_permission',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('redshiftClusterUri', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('userRoleForRedshiftCluster', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName', 'redshiftClusterUri'),
            )
            op.create_table(
                'redshiftcluster',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('organizationUri', sa.String(), nullable=False),
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('clusterArn', sa.String(), nullable=True),
                sa.Column('clusterName', sa.String(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('databaseName', sa.String(), nullable=True),
                sa.Column('databaseUser', sa.String(), nullable=True),
                sa.Column('masterUsername', sa.String(), nullable=True),
                sa.Column('masterDatabaseName', sa.String(), nullable=True),
                sa.Column('nodeType', sa.String(), nullable=True),
                sa.Column('numberOfNodes', sa.Integer(), nullable=True),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=True),
                sa.Column('kmsAlias', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=True),
                sa.Column('vpc', sa.String(), nullable=True),
                sa.Column('subnetGroupName', sa.String(), nullable=True),
                sa.Column('subnetIds', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('securityGroupIds', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('CFNStackName', sa.String(), nullable=True),
                sa.Column('CFNStackStatus', sa.String(), nullable=True),
                sa.Column('CFNStackArn', sa.String(), nullable=True),
                sa.Column('IAMRoles', sa.ARRAY(sa.String()), nullable=True),
                sa.Column('endpoint', sa.String(), nullable=True),
                sa.Column('port', sa.Integer(), nullable=True),
                sa.Column('datahubSecret', sa.String(), nullable=True),
                sa.Column('masterSecret', sa.String(), nullable=True),
                sa.Column('external_schema_created', sa.Boolean(), nullable=True),
                sa.Column('SamlGroupName', sa.String(), nullable=True),
                sa.Column('imported', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri'),
            )
            op.create_table(
                'redshiftcluster_dataset',
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('datasetCopyEnabled', sa.Boolean(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri', 'datasetUri'),
            )
            op.create_table(
                'redshiftcluster_datasettable',
                sa.Column('clusterUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('tableUri', sa.String(), nullable=False),
                sa.Column('shareUri', sa.String(), nullable=True),
                sa.Column('enabled', sa.Boolean(), nullable=True),
                sa.Column('schema', sa.String(), nullable=False),
                sa.Column('databaseName', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('clusterUri', 'datasetUri', 'tableUri'),
            )
        if not has_table('sagemaker_notebook', engine):
            op.create_table(
                'sagemaker_notebook',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('notebookUri', sa.String(), nullable=False),
                sa.Column('NotebookInstanceName', sa.String(), nullable=False),
                sa.Column('NotebookInstanceStatus', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RoleArn', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('notebookUri'),
            )
        if not has_table('sagemaker_studio_domain', engine):
            op.create_table(
                'sagemaker_studio_domain',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('sagemakerStudioUri', sa.String(), nullable=False),
                sa.Column('sagemakerStudioDomainID', sa.String(), nullable=False),
                sa.Column('SagemakerStudioStatus', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RoleArn', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('sagemakerStudioUri'),
            )
            op.create_table(
                'sagemaker_studio_user_profile',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('sagemakerStudioUserProfileUri', sa.String(), nullable=False),
                sa.Column(
                    'sagemakerStudioUserProfileStatus', sa.String(), nullable=False
                ),
                sa.Column(
                    'sagemakerStudioUserProfileName', sa.String(), nullable=False
                ),
                sa.Column(
                    'sagemakerStudioUserProfileNameSlugify', sa.String(), nullable=False
                ),
                sa.Column('sagemakerStudioDomainID', sa.String(), nullable=False),
                sa.Column('AWSAccountId', sa.String(), nullable=False),
                sa.Column('RoleArn', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('sagemakerStudioUserProfileUri'),
            )
        if not has_table('saved_query', engine):
            op.create_table(
                'saved_query',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('scheduledQueryUri', sa.String(), nullable=False),
                sa.Column('savedQueryUri', sa.String(), nullable=False),
                sa.Column('queryOrder', sa.Integer(), nullable=False),
                sa.Column('sqlBody', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('savedQueryUri'),
            )
        if not has_table('scheduled_query', engine):
            op.create_table(
                'scheduled_query',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('scheduledQueryUri', sa.String(), nullable=False),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=True),
                sa.Column('cronexpr', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('scheduledQueryUri'),
            )
        if not has_table('search_index', engine):
            op.create_table(
                'search_index',
                sa.Column('objectUri', sa.String(), nullable=False),
                sa.Column('objectType', sa.String(), nullable=False),
                sa.Column('label', sa.String(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('searcAttribute1', sa.String(), nullable=True),
                sa.Column('searcAttribute2', sa.String(), nullable=True),
                sa.Column('searcAttribute3', sa.String(), nullable=True),
                sa.Column('searcAttribute4', sa.String(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('objectUri'),
            )
        if not has_table('share_object', engine):
            op.create_table(
                'share_object',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=True),
                sa.Column('principalType', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('confirmed', sa.Boolean(), nullable=True),
                sa.PrimaryKeyConstraint('shareUri'),
            )
        if not has_table('share_object_history', engine):
            op.create_table(
                'share_object_history',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('historyUri', sa.String(), nullable=False),
                sa.Column('actionName', sa.String(), nullable=False),
                sa.Column(
                    'actionPayload',
                    postgresql.JSON(astext_type=sa.Text()),
                    nullable=True,
                ),
                sa.PrimaryKeyConstraint('historyUri'),
            )
        if not has_table('share_object_item', engine):
            op.create_table(
                'share_object_item',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('shareItemUri', sa.String(), nullable=False),
                sa.Column('itemType', sa.String(), nullable=False),
                sa.Column('itemUri', sa.String(), nullable=False),
                sa.Column('itemName', sa.String(), nullable=False),
                sa.Column('permission', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=False),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=True),
                sa.Column('GlueTableName', sa.String(), nullable=True),
                sa.Column('S3AccessPointName', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('action', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('shareItemUri'),
            )
        if not has_table('share_object_item_v2', engine):
            op.create_table(
                'share_object_item_v2',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('version', sa.Integer(), nullable=False),
                sa.Column('shareItemUri', sa.String(), nullable=False),
                sa.Column('itemType', sa.String(), nullable=False),
                sa.Column('itemUri', sa.String(), nullable=False),
                sa.Column('itemName', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=False),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('GlueDatabaseName', sa.String(), nullable=True),
                sa.Column('GlueTableName', sa.String(), nullable=True),
                sa.Column('S3AccessPointName', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('shareItemUri'),
            )
        if not has_table('share_object_v2', engine):
            op.create_table(
                'share_object_v2',
                sa.Column('shareUri', sa.String(), nullable=False),
                sa.Column('version', sa.Integer(), nullable=False),
                sa.Column('latest', sa.Boolean(), nullable=False),
                sa.Column('datasetUri', sa.String(), nullable=False),
                sa.Column('datasetName', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=True),
                sa.Column('principalType', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('shareUri', 'version'),
            )
        if not has_table('sqlpipeline', engine):
            op.create_table(
                'sqlpipeline',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('sqlPipelineUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('SamlGroupName', sa.String(), nullable=False),
                sa.Column('repo', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('sqlPipelineUri'),
            )
        if not has_table('stack', engine):
            op.create_table(
                'stack',
                sa.Column('stackUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('accountid', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('cronexpr', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('stack', sa.String(), nullable=False),
                sa.Column(
                    'payload', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('stackid', sa.String(), nullable=True),
                sa.Column(
                    'outputs', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column(
                    'resources', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column(
                    'error', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('lastSeen', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('stackUri'),
            )
        if not has_table('tag', engine):
            op.create_table(
                'tag',
                sa.Column('id', sa.String(), nullable=False),
                sa.Column('tag', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('id'),
            )
        if not has_table('task', engine):
            op.create_table(
                'task',
                sa.Column('taskUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('cronexpr', sa.String(), nullable=True),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column('action', sa.String(), nullable=False),
                sa.Column(
                    'payload', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column(
                    'response', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column(
                    'error', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('lastSeen', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('taskUri'),
            )
        if not has_table('tenant_administrator', engine):
            op.create_table(
                'tenant_administrator',
                sa.Column('userName', sa.String(), nullable=False),
                sa.Column('userRoleInTenant', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userName'),
            )
        if not has_table('term_link', engine):
            op.create_table(
                'term_link',
                sa.Column('linkUri', sa.String(), nullable=False),
                sa.Column('nodeUri', sa.String(), nullable=False),
                sa.Column('targetUri', sa.String(), nullable=False),
                sa.Column('targetType', sa.String(), nullable=False),
                sa.Column('approvedBySteward', sa.Boolean(), nullable=True),
                sa.Column('approvedByOwner', sa.Boolean(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('linkUri'),
            )
        if not has_table('user', engine):
            op.create_table(
                'user',
                sa.Column('userId', sa.String(), nullable=False),
                sa.Column('userName', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('userId'),
            )
        if not has_table('userprofile', engine):
            op.create_table(
                'userprofile',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('username', sa.String(), nullable=False),
                sa.Column('bio', sa.String(), nullable=True),
                sa.Column('b64EncodedAvatar', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('username'),
            )
        if not has_table('vpc', engine):
            op.create_table(
                'vpc',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('environmentUri', sa.String(), nullable=False),
                sa.Column('vpcUri', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=True),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('VpcId', sa.String(), nullable=False),
                sa.PrimaryKeyConstraint('vpcUri'),
            )
        if not has_table('worksheet', engine):
            op.create_table(
                'worksheet',
                sa.Column('label', sa.String(), nullable=False),
                sa.Column('name', sa.String(), nullable=False),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.Column('deleted', sa.DateTime(), nullable=True),
                sa.Column('description', sa.String(), nullable=True),
                sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
                sa.Column('worksheetUri', sa.String(), nullable=False),
                sa.Column('SamlAdminGroupName', sa.String(), nullable=False),
                sa.Column('sqlBody', sa.String(), nullable=True),
                sa.Column(
                    'chartConfig', postgresql.JSON(astext_type=sa.Text()), nullable=True
                ),
                sa.Column('lastSavedAthenaQueryIdForQuery', sa.String(), nullable=True),
                sa.Column('lastSavedAthenaQueryIdForChart', sa.String(), nullable=True),
                sa.PrimaryKeyConstraint('worksheetUri'),
            )
            op.create_table(
                'worksheet_query_result',
                sa.Column('worksheetUri', sa.String(), nullable=False),
                sa.Column('AthenaQueryId', sa.String(), nullable=False),
                sa.Column('status', sa.String(), nullable=False),
                sa.Column(
                    'queryType',
                    sa.Enum('chart', 'data', name='querytype'),
                    nullable=False,
                ),
                sa.Column('sqlBody', sa.String(), nullable=False),
                sa.Column('AwsAccountId', sa.String(), nullable=False),
                sa.Column('region', sa.String(), nullable=False),
                sa.Column('OutputLocation', sa.String(), nullable=False),
                sa.Column('error', sa.String(), nullable=True),
                sa.Column('ElapsedTimeInMs', sa.Integer(), nullable=True),
                sa.Column('DataScannedInBytes', sa.Integer(), nullable=True),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('AthenaQueryId'),
            )
            op.create_table(
                'worksheet_share',
                sa.Column('worksheetShareUri', sa.String(), nullable=False),
                sa.Column('worksheetUri', sa.String(), nullable=False),
                sa.Column('principalId', sa.String(), nullable=False),
                sa.Column('principalType', sa.String(), nullable=False),
                sa.Column('canEdit', sa.Boolean(), nullable=True),
                sa.Column('owner', sa.String(), nullable=False),
                sa.Column('created', sa.DateTime(), nullable=True),
                sa.Column('updated', sa.DateTime(), nullable=True),
                sa.PrimaryKeyConstraint('worksheetShareUri'),
            )
    except Exception as e:
        print('Failed to init database due to:', e)
        pass


# ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('worksheet_share')
    op.drop_table('worksheet_query_result')
    op.drop_table('worksheet')
    op.drop_table('vpc')
    op.drop_table('userprofile')
    op.drop_table('user')
    op.drop_table('term_link')
    op.drop_table('tenant_administrator')
    op.drop_table('task')
    op.drop_table('tag')
    op.drop_table('stack')
    op.drop_table('sqlpipeline')
    op.drop_table('share_object_v2')
    op.drop_table('share_object_item_v2')
    op.drop_table('share_object_item')
    op.drop_table('share_object_history')
    op.drop_table('share_object')
    op.drop_table('search_index')
    op.drop_table('scheduled_query')
    op.drop_table('saved_query')
    op.drop_table('sagemaker_studio_user_profile')
    op.drop_table('sagemaker_studio_domain')
    op.drop_table('sagemaker_notebook')
    op.drop_table('redshiftcluster_datasettable')
    op.drop_table('redshiftcluster_dataset')
    op.drop_table('redshiftcluster')
    op.drop_table('redshift_cluster_user_permission')
    op.drop_table('organization_user')
    op.drop_table('organization_topic')
    op.drop_table('organization')
    op.drop_table('notification')
    op.drop_table('metric')
    op.drop_table('metadata_tag')
    op.drop_table('metadata_facet')
    op.drop_table('lineage_store')
    op.drop_table('key_value_pair')
    op.drop_table('item_tags')
    op.drop_table('group_member')
    op.drop_table('group')
    op.drop_table('glossary_node')
    op.drop_table('feed_message')
    op.drop_table('environment_user_permission')
    op.drop_table('environment_permission')
    op.drop_table('environment_group_permission')
    op.drop_table('environment')
    op.drop_table('document')
    op.drop_table('dataset_user_permission')
    op.drop_table('dataset_topic')
    op.drop_table('dataset_table_profiling_job')
    op.drop_table('dataset_table_permission')
    op.drop_table('dataset_table_column')
    op.drop_table('dataset_table')
    op.drop_table('dataset_storage_location_permission')
    op.drop_table('dataset_storage_location')
    op.drop_table('dataset_query')
    op.drop_table('dataset_quality_rule')
    op.drop_table('dataset_profiling_run')
    op.drop_table('dataset_loader')
    op.drop_table('dataset_access_point')
    op.drop_table('dataset')
    op.drop_table('data_access_request')
    op.drop_table('dashboardshare')
    op.drop_table('dashboard')
    op.drop_table('athena_query_execution')
    op.drop_table('apikey')
    op.drop_table('all_permissions')
    op.drop_table('airflowcluster')
    op.drop_table('airflow_project')
    op.drop_table('airflow_cluster_user_permission')
    op.drop_table('activity')
    op.drop_table('EnvironmentRedshiftCluster')
    # ### end Alembic commands ###
