"""add env feature flags

Revision ID: b6e0ac8f6d3f
Revises: 967fa9c0a147
Create Date: 2021-10-25 09:00:40.925964

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy import Boolean, Column, String
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import query_expression

from dataall.db import Resource, utils

revision = 'b6e0ac8f6d3f'
down_revision = '967fa9c0a147'
branch_labels = None
depends_on = None
Base = declarative_base()


class Environment(Resource, Base):
    __tablename__ = 'environment'
    organizationUri = Column(String, nullable=False)
    environmentUri = Column(String, primary_key=True, default=utils.uuid('environment'))
    AwsAccountId = Column(String, nullable=False)
    region = Column(String, nullable=False, default='eu-west-1')
    cognitoGroupName = Column(String, nullable=True)

    validated = Column(Boolean, default=False)
    environmentType = Column(String, nullable=False, default='Data')
    isOrganizationDefaultEnvironment = Column(Boolean, default=False)
    EnvironmentDefaultIAMRoleName = Column(String, nullable=False)
    EnvironmentDefaultIAMRoleArn = Column(String, nullable=False)
    EnvironmentDefaultBucketName = Column(String)
    roleCreated = Column(Boolean, nullable=False, default=False)

    dashboardsEnabled = Column(Boolean, default=False)
    notebooksEnabled = Column(Boolean, default=True)
    mlStudiosEnabled = Column(Boolean, default=True)
    pipelinesEnabled = Column(Boolean, default=True)
    warehousesEnabled = Column(Boolean, default=True)

    userRoleInEnvironment = query_expression()

    SamlGroupName = Column(String, nullable=True)
    CDKRoleArn = Column(String, nullable=False)

    subscriptionsEnabled = Column(Boolean, default=False)
    subscriptionsProducersTopicName = Column(String)
    subscriptionsProducersTopicImported = Column(Boolean, default=False)
    subscriptionsConsumersTopicName = Column(String)
    subscriptionsConsumersTopicImported = Column(Boolean, default=False)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        bind = op.get_bind()
        session = orm.Session(bind=bind)
        print('Adding environment flags...')
        op.add_column('environment', sa.Column('dashboardsEnabled', sa.Boolean()))
        op.add_column('environment', sa.Column('notebooksEnabled', sa.Boolean()))
        op.add_column('environment', sa.Column('mlStudiosEnabled', sa.Boolean()))
        op.add_column('environment', sa.Column('pipelinesEnabled', sa.Boolean()))
        op.add_column('environment', sa.Column('warehousesEnabled', sa.Boolean()))
        environments: [Environment] = session.query(Environment).all()
        for environment in environments:
            print('Back filling quicksight flag')
            environment.dashboardsEnabled = environment.quicksight_enabled
            environment.notebooksEnabled = True
            environment.mlStudiosEnabled = True
            environment.pipelinesEnabled = True
            environment.warehousesEnabled = True
            session.commit()

        print('Dropping quicksight_enabled column...')
        op.drop_column('environment', 'quicksight_enabled')

        print('Environment feature flags successfully set up')

    except Exception as e:
        print(f'Failed to init permissions due to: {e}')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'environment',
        sa.Column(
            'quicksight_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.drop_column('environment', 'warehousesEnabled')
    op.drop_column('environment', 'pipelinesEnabled')
    op.drop_column('environment', 'mlStudiosEnabled')
    op.drop_column('environment', 'notebooksEnabled')
    op.drop_column('environment', 'dashboardsEnabled')
    # ### end Alembic commands ###
